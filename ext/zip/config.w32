// vim:ft=javascript

ARG_ENABLE("zip", "ZIP support", "yes,shared");

if (CRX_ZIP != "no") {
	if (CHECK_HEADER_ADD_INCLUDE("zip.h", "CFLAGS_ZIP", CRX_CRX_BUILD + "\\include;" + CRX_EXTRA_INCLUDES) &&
		CHECK_HEADER_ADD_INCLUDE("zipconf.h", "CFLAGS_ZIP", CRX_CRX_BUILD + "\\lib\\libzip\\include;" + CRX_EXTRA_LIBS + "\\libzip\\include;" + CRX_ZIP) &&
		(CRX_ZIP_SHARED && CHECK_LIB("libzip.lib", "zip", CRX_ZIP) ||
		 CHECK_LIB("libzip_a.lib", "zip", CRX_ZIP) && CHECK_LIB("libbz2_a.lib", "zip", CRX_ZIP) && CHECK_LIB("zlib_a.lib", "zip", CRX_ZIP) && CHECK_LIB("liblzma_a.lib", "zip", CRX_ZIP))
	) {
		EXTENSION('zip', 'crx_zip.c zip_stream.c');

		if (get_define("LIBS_ZIP").match("libzip_a(?:_debug)?\.lib")) {
			/* Using static dependency lib. */
			AC_DEFINE("ZIP_STATIC", 1);
		}

		AC_DEFINE('HAVE_ZIP', 1);
		ADD_FLAG("CFLAGS_ZIP", "/D _WIN32 /D HAVE_SET_MTIME /D HAVE_ENCRYPTION /D HAVE_LIBZIP_VERSION /D HAVE_PROGRESS_CALLBACK /D HAVE_CANCEL_CALLBACK /D HAVE_METHOD_SUPPORTED /D LZMA_API_STATIC");
	} else {
		WARNING("zip not enabled; libraries and headers not found");
	}
}
