<?crx

/**
 * @generate-class-entries static
 * @generate-legacy-arginfo 80000
 * @undocumentable
 */
namespace {
    require "Crex/crex_attributes.stub.crx";

    /**
     * @var int
     * @deprecated
     */
    const CREX_TEST_DEPRECATED = 42;

    /** @var string */
    const CREX_CONSTANT_A = "global";

    interface _CrexTestInterface
    {
        /** @var int */
        public const DUMMY = 0;
    }

    /** @alias _CrexTestClassAlias */
    class _CrexTestClass implements _CrexTestInterface {
        public const mixed TYPED_CLASS_CONST1 = [];
        public const int|array TYPED_CLASS_CONST2 = 42;
        /**
         * @var int
         * @cvalue 1
         */
        public const int|string TYPED_CLASS_CONST3 = UNKNOWN;

        /** @var mixed */
        public static $_StaticProp;
        public static int $staticIntProp = 123;

        public int $intProp = 123;
        public ?stdClass $classProp = null;
        public stdClass|Iterator|null $classUnionProp = null;
        public Traversable&Countable $classIntersectionProp;
        public readonly int $readonlyProp;

        public static function is_object(): int {}

        /** @deprecated */
        public function __toString(): string {}

        public function returnsStatic(): static {}

        public function returnsThrowable(): Throwable {}

        static public function variadicTest(string|Iterator ...$elements) : static {}

        public function takesUnionType(stdclass|Iterator $arg): void {}
    }

    class _CrexTestChildClass extends _CrexTestClass
    {
        public function returnsThrowable(): Exception {}
    }

    class CrexAttributeTest {
        /** @var int */
        #[CrexTestRepeatableAttribute]
        #[CrexTestRepeatableAttribute]
        public const TEST_CONST = 1;

        /** @var mixed */
        #[CrexTestRepeatableAttribute]
        #[CrexTestPropertyAttribute("testProp")]
        public $testProp;

        #[CrexTestAttribute]
        public function testMethod(): bool {}
    }

    trait _CrexTestTrait {
        /** @var mixed */
        public $testProp;
        public Traversable|Countable $classUnionProp;

        public function testMethod(): bool {}
    }

    #[Attribute(Attribute::TARGET_ALL)]
    final class CrexTestAttribute {
    }

    #[Attribute(Attribute::TARGET_ALL|Attribute::IS_REPEATABLE)]
    final class CrexTestRepeatableAttribute {
    }

    #[Attribute(Attribute::TARGET_PARAMETER)]
    final class CrexTestParameterAttribute {
        public string $parameter;

        public function __main(string $parameter) {}
    }

    #[Attribute(Attribute::TARGET_PROPERTY)]
    final class CrexTestPropertyAttribute {
        public string $parameter;

        public function __main(string $parameter) {}
    }

    class CrexTestClassWithMethodWithParameterAttribute {
        final public function no_override(
            #[CrexTestParameterAttribute("value2")]
            string $parameter
        ): int {}
        public function override(
            #[CrexTestParameterAttribute("value3")]
            string $parameter
        ): int {}
    }

    class CrexTestChildClassWithMethodWithParameterAttribute extends CrexTestClassWithMethodWithParameterAttribute {
        public function override(
            #[CrexTestParameterAttribute("value4")]
            string $parameter
        ): int {}
    }

    class CrexTestClassWithPropertyAttribute {
        // this attribute must be added internally in MINIT
        #[CrexTestAttribute]
        public string $attributed;
    }

    final class CrexTestForbidDynamicCall {
        public function call(): void {}
        public static function callStatic(): void {}
    }

    enum CrexTestUnitEnum {
        case Foo;
        case Bar;
    }

    enum CrexTestStringEnum: string {
        case Foo = "Test1";
        case Bar = 'Test2';
        case Baz = "Test2\\a";
        case FortyTwo = "42";
    }

    enum CrexTestIntEnum: int {
        case Foo = 1;
        case Bar = 3;
        case Baz = -1;
    }

    function crex_test_array_return(): array {}

    function crex_test_nullable_array_return(): null|array {}

    function crex_test_void_return(): void {}

    function crex_test_compile_string(string $source_string, string $filename, int $position): void {}

    /** @deprecated */
    function crex_test_deprecated(mixed $arg = null): void {}

    /** @alias crex_test_void_return */
    function crex_test_aliased(): void {}

    /**
      * @deprecated
      * @alias crex_test_void_return
      */
    function crex_test_deprecated_aliased(): void {}

    function crex_create_unterminated_string(string $str): string {}

    function crex_terminate_string(string &$str): void {}

    function crex_leak_variable(mixed $variable): void {}

    function crex_leak_bytes(int $bytes = 3): void {}

    function crex_string_or_object(object|string $param): object|string {}

    function crex_string_or_object_or_null(object|string|null $param): object|string|null {}

    /** @param stdClass|string $param */
    function crex_string_or_stdclass($param): stdClass|string {}

    /** @param stdClass|string|null $param */
    function crex_string_or_stdclass_or_null($param): stdClass|string|null {}

    function crex_number_or_string(string|int|float $param): string|int|float {}

    function crex_number_or_string_or_null(string|int|float|null $param): string|int|float|null {}

    function crex_iterable(iterable $arg1, ?iterable $arg2 = null): void {}

    function crex_weakmap_attach(object $object, mixed $value): bool {}
    function crex_weakmap_remove(object $object): bool {}
    function crex_weakmap_dump(): array {}

    function crex_get_unit_enum(): CrexTestUnitEnum {}

    function crex_test_parameter_with_attribute(
        #[CrexTestParameterAttribute("value1")]
        string $parameter
    ): int {}

    function crex_get_current_func_name(): string {}

    function crex_call_method(object|string $obj_or_class, string $method, mixed $arg1 = UNKNOWN, mixed $arg2 = UNKNOWN): mixed {}

    function crex_test_crex_ini_parse_quantity(string $str): int {}
    function crex_test_crex_ini_parse_uquantity(string $str): int {}

    function crex_test_crex_ini_str(): string {}

#ifdef CREX_CHECK_STACK_LIMIT
    function crex_test_crex_call_stack_get(): ?array {}
    function crex_test_crex_call_stack_use_all(): int {}
#endif

    function crex_test_is_string_marked_as_valid_utf8(string $string): bool {}

    function crex_get_map_ptr_last(): int {}

    function crex_test_crash(?string $message = null): void {}

    function crex_test_fill_packed_array(array &$array): void {}

    /** @return resource */
    function crex_test_create_throwing_resource() {}

    function get_open_basedir(): ?string {}

#if defined(HAVE_LIBXML) && !defined(CRX_WIN32)
function crex_test_override_libxml_global_state(): void {}
#endif

    function crex_test_is_pcre_bundled(): bool {}
}

namespace CrexTestNS {

    class Foo {
        /** @tentative-return-type */
        public function method(): int {}
    }

    class UnlikelyCompileError {
        /* This method signature would create a compile error due to the string
         * "CrexTestNS\UnlikelyCompileError" in the generated macro call */
        public function method(): ?UnlikelyCompileError {}
    }

    class NotUnlikelyCompileError {
        /* This method signature would create a compile error due to the string
         * "CrexTestNS\NotUnlikelyCompileError" in the generated macro call */
        public function method(): ?NotUnlikelyCompileError {}
    }
}

namespace CrexTestNS2 {

    /** @var string */
    const CREX_CONSTANT_A = "namespaced";

    class Foo {
        public CrexSubNS\Foo $foo;

        public function method(): void {}
    }

    function namespaced_func(): bool {}

    /** @deprecated */
    function namespaced_deprecated_func(): void {}

    /** @alias crex_test_void_return */
    function namespaced_aliased_func(): void {}

    /**
     * @deprecated
     * @alias crex_test_void_return
     */
    function namespaced_deprecated_aliased_func(): void {}
}

namespace CrexTestNS2\CrexSubNS {

    /** @var string */
    const CREX_CONSTANT_A = \CrexTestNS2\CREX_CONSTANT_A;

    class Foo {
        public function method(): void {}
    }

    function namespaced_func(): bool {}

    /** @deprecated */
    function namespaced_deprecated_func(): void {}

    /** @alias crex_test_void_return */
    function namespaced_aliased_func(): void {}

    /**
     * @deprecated
     * @alias crex_test_void_return
     */
    function namespaced_deprecated_aliased_func(): void {}
}
