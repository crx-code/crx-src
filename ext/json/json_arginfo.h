/* This is a generated file, edit the .stub.crx file instead.
 * Stub hash: 0ceb50047401c4b9e878c09cc518eacc274f7fff */

CREX_BEGIN_ARG_WITH_RETURN_TYPE_MASK_EX(arginfo_json_encode, 0, 1, MAY_BE_STRING|MAY_BE_FALSE)
	CREX_ARG_TYPE_INFO(0, value, IS_MIXED, 0)
	CREX_ARG_TYPE_INFO_WITH_DEFAULT_VALUE(0, flags, IS_LONG, 0, "0")
	CREX_ARG_TYPE_INFO_WITH_DEFAULT_VALUE(0, depth, IS_LONG, 0, "512")
CREX_END_ARG_INFO()

CREX_BEGIN_ARG_WITH_RETURN_TYPE_INFO_EX(arginfo_json_decode, 0, 1, IS_MIXED, 0)
	CREX_ARG_TYPE_INFO(0, json, IS_STRING, 0)
	CREX_ARG_TYPE_INFO_WITH_DEFAULT_VALUE(0, associative, _IS_BOOL, 1, "null")
	CREX_ARG_TYPE_INFO_WITH_DEFAULT_VALUE(0, depth, IS_LONG, 0, "512")
	CREX_ARG_TYPE_INFO_WITH_DEFAULT_VALUE(0, flags, IS_LONG, 0, "0")
CREX_END_ARG_INFO()

CREX_BEGIN_ARG_WITH_RETURN_TYPE_INFO_EX(arginfo_json_validate, 0, 1, _IS_BOOL, 0)
	CREX_ARG_TYPE_INFO(0, json, IS_STRING, 0)
	CREX_ARG_TYPE_INFO_WITH_DEFAULT_VALUE(0, depth, IS_LONG, 0, "512")
	CREX_ARG_TYPE_INFO_WITH_DEFAULT_VALUE(0, flags, IS_LONG, 0, "0")
CREX_END_ARG_INFO()

CREX_BEGIN_ARG_WITH_RETURN_TYPE_INFO_EX(arginfo_json_last_error, 0, 0, IS_LONG, 0)
CREX_END_ARG_INFO()

CREX_BEGIN_ARG_WITH_RETURN_TYPE_INFO_EX(arginfo_json_last_error_msg, 0, 0, IS_STRING, 0)
CREX_END_ARG_INFO()

CREX_BEGIN_ARG_WITH_TENTATIVE_RETURN_TYPE_INFO_EX(arginfo_class_JsonSerializable_jsonSerialize, 0, 0, IS_MIXED, 0)
CREX_END_ARG_INFO()


CREX_FUNCTION(json_encode);
CREX_FUNCTION(json_decode);
CREX_FUNCTION(json_validate);
CREX_FUNCTION(json_last_error);
CREX_FUNCTION(json_last_error_msg);


static const crex_function_entry ext_functions[] = {
	CREX_FE(json_encode, arginfo_json_encode)
	CREX_FE(json_decode, arginfo_json_decode)
	CREX_FE(json_validate, arginfo_json_validate)
	CREX_FE(json_last_error, arginfo_json_last_error)
	CREX_FE(json_last_error_msg, arginfo_json_last_error_msg)
	CREX_FE_END
};


static const crex_function_entry class_JsonSerializable_methods[] = {
	CREX_ABSTRACT_ME_WITH_FLAGS(JsonSerializable, jsonSerialize, arginfo_class_JsonSerializable_jsonSerialize, CREX_ACC_PUBLIC|CREX_ACC_ABSTRACT)
	CREX_FE_END
};


static const crex_function_entry class_JsonException_methods[] = {
	CREX_FE_END
};

static void register_json_symbols(int module_number)
{
	REGISTER_LONG_CONSTANT("JSON_HEX_TAG", CRX_JSON_HEX_TAG, CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("JSON_HEX_AMP", CRX_JSON_HEX_AMP, CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("JSON_HEX_APOS", CRX_JSON_HEX_APOS, CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("JSON_HEX_QUOT", CRX_JSON_HEX_QUOT, CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("JSON_FORCE_OBJECT", CRX_JSON_FORCE_OBJECT, CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("JSON_NUMERIC_CHECK", CRX_JSON_NUMERIC_CHECK, CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("JSON_UNESCAPED_SLASHES", CRX_JSON_UNESCAPED_SLASHES, CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("JSON_PRETTY_PRINT", CRX_JSON_PRETTY_PRINT, CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("JSON_UNESCAPED_UNICODE", CRX_JSON_UNESCAPED_UNICODE, CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("JSON_PARTIAL_OUTPUT_ON_ERROR", CRX_JSON_PARTIAL_OUTPUT_ON_ERROR, CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("JSON_PRESERVE_ZERO_FRACTION", CRX_JSON_PRESERVE_ZERO_FRACTION, CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("JSON_UNESCAPED_LINE_TERMINATORS", CRX_JSON_UNESCAPED_LINE_TERMINATORS, CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("JSON_OBJECT_AS_ARRAY", CRX_JSON_OBJECT_AS_ARRAY, CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("JSON_BIGINT_AS_STRING", CRX_JSON_BIGINT_AS_STRING, CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("JSON_INVALID_UTF8_IGNORE", CRX_JSON_INVALID_UTF8_IGNORE, CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("JSON_INVALID_UTF8_SUBSTITUTE", CRX_JSON_INVALID_UTF8_SUBSTITUTE, CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("JSON_THROW_ON_ERROR", CRX_JSON_THROW_ON_ERROR, CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("JSON_ERROR_NONE", CRX_JSON_ERROR_NONE, CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("JSON_ERROR_DEPTH", CRX_JSON_ERROR_DEPTH, CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("JSON_ERROR_STATE_MISMATCH", CRX_JSON_ERROR_STATE_MISMATCH, CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("JSON_ERROR_CTRL_CHAR", CRX_JSON_ERROR_CTRL_CHAR, CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("JSON_ERROR_SYNTAX", CRX_JSON_ERROR_SYNTAX, CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("JSON_ERROR_UTF8", CRX_JSON_ERROR_UTF8, CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("JSON_ERROR_RECURSION", CRX_JSON_ERROR_RECURSION, CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("JSON_ERROR_INF_OR_NAN", CRX_JSON_ERROR_INF_OR_NAN, CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("JSON_ERROR_UNSUPPORTED_TYPE", CRX_JSON_ERROR_UNSUPPORTED_TYPE, CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("JSON_ERROR_INVALID_PROPERTY_NAME", CRX_JSON_ERROR_INVALID_PROPERTY_NAME, CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("JSON_ERROR_UTF16", CRX_JSON_ERROR_UTF16, CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("JSON_ERROR_NON_BACKED_ENUM", CRX_JSON_ERROR_NON_BACKED_ENUM, CONST_PERSISTENT);
}

static crex_class_entry *register_class_JsonSerializable(void)
{
	crex_class_entry ce, *class_entry;

	INIT_CLASS_ENTRY(ce, "JsonSerializable", class_JsonSerializable_methods);
	class_entry = crex_register_internal_interface(&ce);

	return class_entry;
}

static crex_class_entry *register_class_JsonException(crex_class_entry *class_entry_Exception)
{
	crex_class_entry ce, *class_entry;

	INIT_CLASS_ENTRY(ce, "JsonException", class_JsonException_methods);
	class_entry = crex_register_internal_class_ex(&ce, class_entry_Exception);

	return class_entry;
}
