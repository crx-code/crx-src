--TEST--
Crxa: test that creation of tar-based crxa generates valid tar with all bells/whistles
--EXTENSIONS--
crxa
--INI--
crxa.readonly=0
--FILE--
<?crx

$fname = __DIR__ . '/' . basename(__FILE__, '.crx') . '.crxa.tar.crx';
$pname = 'crxa://' . $fname;
$fname2 = __DIR__ . '/' . basename(__FILE__, '.crx') . '.2.crxa.tar.crx';
$pname2 = 'crxa://' . $fname2;

$crxa = new Crxa($fname);

$crxa->setMetadata('hi there');
$crxa['a'] = 'hi';
$crxa['a']->setMetadata('a meta');
$crxa['b'] = 'hi2';
$crxa['c'] = 'hi3';
$crxa['b']->chmod(0444);
$crxa->setStub("<?crx ok __HALT_COMPILER();");
$crxa->setAlias("hime");
unset($crxa);
copy($fname, $fname2);
Crxa::unlinkArchive($fname);
var_dump(file_exists($fname), file_exists($pname . '/a'));

$crxa = new Crxa($fname2);
var_dump($crxa['a']->getContent(), $crxa['b']->getContent(), $crxa['c']->getContent());
var_dump((string) decoct(fileperms($pname2 . '/b')));
var_dump($crxa->getStub());
var_dump($crxa->getAlias());
var_dump($crxa->getMetadata());
var_dump($crxa['a']->getMetadata());
?>
--CLEAN--
<?crx unlink(__DIR__ . '/' . basename(__FILE__, '.clean.crx') . '.2.crxa.tar.crx'); ?>
--EXPECT--
bool(false)
bool(false)
string(2) "hi"
string(3) "hi2"
string(3) "hi3"
string(6) "100444"
string(32) "<?crx ok __HALT_COMPILER(); ?>
"
string(4) "hime"
string(8) "hi there"
string(6) "a meta"
