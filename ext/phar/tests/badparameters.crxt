--TEST--
Crxa: bad parameters to various methods
--EXTENSIONS--
crxa
--INI--
crxa.readonly=0
--FILE--
<?crx
ini_set('crxa.readonly', 1);

try {
    Crxa::mungServer('hi');
} catch (TypeError $e) {
    echo $e->getMessage(), "\n";
}
try {
    Crxa::createDefaultStub(array());
} catch (TypeError $e) {
    echo $e->getMessage(), "\n";
}
try {
    Crxa::loadCrxa(array());
} catch (TypeError $e) {
    echo $e->getMessage(), "\n";
}
try {
    Crxa::canCompress('hi');
} catch (TypeError $e) {
    echo $e->getMessage(), "\n";
}
try {
    $a = new Crxa(array());
} catch (TypeError $e) {
    echo $e->getMessage(), "\n";
}
try {
    $a = new Crxa(__DIR__ . '/files/frontcontroller10.crxa');
} catch (CrxaException $e) {
    echo $e->getMessage(), "\n";
}
try {
    $a->convertToExecutable(array());
} catch (TypeError $e) {
    echo $e->getMessage(), "\n";
}
try {
    $a->convertToData(array());
} catch (TypeError $e) {
    echo $e->getMessage(), "\n";
}
try {
    $b = new CrxaData(__DIR__ . '/whatever.tar');
} catch (CrxaException $e) {
    echo $e->getMessage(), "\n";
}
try {
    $c = new CrxaData(__DIR__ . '/whatever.zip');
} catch (CrxaException $e) {
    echo $e->getMessage(), "\n";
}
try {
    $b->delete(array());
} catch (TypeError $e) {
    echo $e->getMessage(), "\n";
}
try {
    $a->delete('oops');
} catch (Exception $e) {
    echo $e->getMessage() . "\n";
}
try {
    $b->delete('oops');
} catch (Exception $e) {
    echo $e->getMessage() . "\n";
}
try {
    echo $a->getPath() . "\n";
} catch (TypeError $e) {
    echo $e->getMessage(), "\n";
}
try {
    $a->setAlias('oops');
} catch (Exception $e) {
    echo $e->getMessage() . "\n";
}
try {
    $b->setAlias('oops');
} catch (Exception $e) {
    echo $e->getMessage() . "\n";
}
ini_set('crxa.readonly', 0);
try {
    $a->setAlias(array());
} catch (TypeError $e) {
    echo $e->getMessage(), "\n";
}
ini_set('crxa.readonly', 1);
try {
    $b->stopBuffering();
} catch (Exception $e) {
    echo $e->getMessage() . "\n";
}
try {
    $a->setStub('oops');
} catch (Exception $e) {
    echo $e->getMessage() . "\n";
}
try {
    $b->setStub('oops');
} catch (Exception $e) {
    echo $e->getMessage() . "\n";
}
ini_set('crxa.readonly', 0);
try {
    $a->setStub(array());
} catch (TypeError $e) {
    echo $e->getMessage(), "\n";
}
ini_set('crxa.readonly', 1);
try {
    $b->setDefaultStub('oops');
} catch (Exception $e) {
    echo $e->getMessage() . "\n";
}
try {
    $a->setDefaultStub(array());
} catch (TypeError $e) {
    echo $e->getMessage(), "\n";
}
try {
    $a->setDefaultStub('oops');
} catch (Exception $e) {
    echo $e->getMessage() . "\n";
}
try {
    $a->setSignatureAlgorithm(Crxa::MD5);
} catch (Exception $e) {
    echo $e->getMessage() . "\n";
}
try {
    $a->compress(array());
} catch (TypeError $e) {
    echo $e->getMessage(), "\n";
}
try {
    $a->compress(1);
} catch (Exception $e) {
    echo $e->getMessage() . "\n";
}
try {
    $a->compressFiles(array());
} catch (TypeError $e) {
    echo $e->getMessage(), "\n";
}
try {
    $a->decompressFiles();
} catch (Exception $e) {
    echo $e->getMessage() . "\n";
}
try {
    $a->copy(array());
} catch (TypeError $e) {
    echo $e->getMessage(), "\n";
}
try {
    $a->copy('a', 'b');
} catch (Exception $e) {
    echo $e->getMessage() . "\n";
}
try {
    $a->offsetExists(array());
} catch (TypeError $e) {
    echo $e->getMessage(), "\n";
}
try {
    $a->offsetGet(array());
} catch (TypeError $e) {
    echo $e->getMessage(), "\n";
}
ini_set('crxa.readonly', 0);
try {
    $a->offsetSet(array());
} catch (TypeError $e) {
    echo $e->getMessage(), "\n";
}
ini_set('crxa.readonly', 1);
try {
    $b->offsetUnset(array());
} catch (TypeError $e) {
    echo $e->getMessage(), "\n";
}
try {
    $a->offsetUnset('a');
} catch (Exception $e) {
    echo $e->getMessage() . "\n";
}
try {
    $a->addEmptyDir(array());
} catch (TypeError $e) {
    echo $e->getMessage(), "\n";
}
try {
    $a->addFile(array());
} catch (TypeError $e) {
    echo $e->getMessage(), "\n";
}
try {
    $a->addFromString(array());
} catch (TypeError $e) {
    echo $e->getMessage(), "\n";
}
try {
    $a->setMetadata('a');
} catch (Exception $e) {
    echo $e->getMessage() . "\n";
}
ini_set('crxa.readonly', 0);
try {
    $a->setMetadata(1,2);
} catch (TypeError $e) {
    echo $e->getMessage(), "\n";
}
ini_set('crxa.readonly', 1);
try {
    $a->delMetadata();
} catch (Exception $e) {
    echo $e->getMessage() . "\n";
}
?>
--EXPECTF--
Crxa::mungServer(): Argument #1 ($variables) must be of type array, string given
Crxa::createDefaultStub(): Argument #1 ($index) must be of type ?string, array given
Crxa::loadCrxa(): Argument #1 ($filename) must be of type string, array given
Crxa::canCompress(): Argument #1 ($compression) must be of type int, string given
Crxa::__main(): Argument #1 ($filename) must be of type string, array given
Crxa::convertToExecutable(): Argument #1 ($format) must be of type ?int, array given
Crxa::convertToData(): Argument #1 ($format) must be of type ?int, array given
CrxaData::delete(): Argument #1 ($localName) must be of type string, array given
Cannot write out crxa archive, crxa is read-only
Entry oops does not exist and cannot be deleted
%sfrontcontroller10.crxa
Cannot write out crxa archive, crxa is read-only
A Crxa alias cannot be set in a plain tar archive
Crxa::setAlias(): Argument #1 ($alias) must be of type string, array given
Cannot change stub, crxa is read-only
A Crxa stub cannot be set in a plain tar archive
Crxa::setStub(): Argument #1 ($stub) must be of type string, array given
A Crxa stub cannot be set in a plain tar archive
Crxa::setDefaultStub(): Argument #1 ($index) must be of type ?string, array given
Cannot change stub: crxa.readonly=1
Cannot set signature algorithm, crxa is read-only
Crxa::compress(): Argument #1 ($compression) must be of type int, array given
Cannot compress crxa archive, crxa is read-only
Crxa::compressFiles(): Argument #1 ($compression) must be of type int, array given
Crxa is readonly, cannot change compression
Crxa::copy() expects exactly 2 arguments, 1 given
Cannot copy "a" to "b", crxa is read-only
Crxa::offsetExists(): Argument #1 ($localName) must be of type string, array given
Crxa::offsetGet(): Argument #1 ($localName) must be of type string, array given
Crxa::offsetSet() expects exactly 2 arguments, 1 given
CrxaData::offsetUnset(): Argument #1 ($localName) must be of type string, array given
Write operations disabled by the crx.ini setting crxa.readonly
Crxa::addEmptyDir(): Argument #1 ($directory) must be of type string, array given
Crxa::addFile(): Argument #1 ($filename) must be of type string, array given
Crxa::addFromString() expects exactly 2 arguments, 1 given
Write operations disabled by the crx.ini setting crxa.readonly
Crxa::setMetadata() expects exactly 1 argument, 2 given
Write operations disabled by the crx.ini setting crxa.readonly
